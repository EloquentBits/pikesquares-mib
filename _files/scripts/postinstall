#!/usr/bin/env bash
set -euxo pipefail

# if [ "$(whoami)" != "root" ]; then
#     echo "You must be root to do this"
#     su -c "$0 $*"
#     exit
# fi

APP_NAME="pikesquares"
APP_BINARY_PATH="/usr/local/bin/$APP_NAME"
SERVER_USER="$USER"
USER_HOME="$HOME"
# if [ "$USER" = "root" ]; then
# 	echo "Seems like running from root, creating dedicated user"
# 	SERVER_USER="pikesquares"
# 	local max_id=$(dscl . -list /Users UniqueID | awk 'BEGIN { max = 500; } { if ($2 > max) max = $2; } END { print max + 1; }')
#     local new_id=$((max_id+1))

#     # Creating group for user (groupadd)
#     dscl . -create "/Groups/$SERVER_USER"
#     dscl . -create "/Groups/$SERVER_USER" gid "$new_id"

#     # Creating user itself (useradd)
#     dscl . -create "/Users/$SERVER_USER"
#     dscl . -create "/Users/$SERVER_USER" UserShell /bin/bash
#     dscl . -create "/Users/$SERVER_USER" UniqueID "$new_id"
#     dscl . -create "/Users/$SERVER_USER" PrimaryGroupID "20"
#     # Promote user to admin if need
#     # dscl . -append /Groups/admin GroupMembership "$SERVER_USER"
# 	USER_HOME="/Users/$SERVER_USER"
# fi

LOG_DIR="$USER_HOME/Library/Logs/$APP_NAME"
[[ -d "$LOG_DIR" ]] || mkdir -p "$LOG_DIR"

LOG_FILE_PATH="$LOG_DIR/$APP_NAME-script-postinstall.log"

exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>"$LOG_FILE_PATH" 2>&1
# Everything below will go to the file 'pikesquares-postinstall-log.out':
echo "[installing as $(whoami) for $USER] Logging postinstall script to $LOG_FILE_PATH @ $(date +%c)"

DAEMON_ID="com.eloquentbits.${APP_NAME}"
SYSTEM_APP_DIR="/Library/Application Support/${APP_NAME}"
SYSTEM_DAEMON_PATH="/Library/LaunchDaemons/${DAEMON_ID}.plist"
USER_APP_DIR="${USER_HOME}${SYSTEM_APP_DIR}"
USER_DAEMON_PATH="${USER_HOME}/Library/LaunchAgents/${DAEMON_ID}.plist"
DOMAIN="system"
if [ "$USER" = "root" ]; then
	USER_APP_DIR="$SYSTEM_APP_DIR"
	USER_DAEMON_PATH="$SYSTEM_DAEMON_PATH"
fi

SYSTEM_PYTHON_PATH=$(which python3)
SYSTEM_PYTHON_BIN_DIR=$(dirname $SYSTEM_PYTHON_PATH)

# Generating SSL certificates
CAROOT="${USER_APP_DIR}/ssl"  # The dir should be the same as in conf.py!!!
[[ -d "$CAROOT" ]] || mkdir -p "$CAROOT"

WILDCARD_CERT="${CAROOT}/pikesquares.dev.pem"
WILDCARD_CERT_KEY="${CAROOT}/pikesquares.dev-key.pem"
if [[ ! -f "${WILDCARD_CERT_KEY}" || ! -f "${WILDCARD_CERT}" ]]; then 
  echo "Generating CA and self-signed wildcard cert."
  SCIE_BOOT="generate-certs" ${APP_BINARY_PATH} -key-file "${WILDCARD_CERT_KEY}" -cert-file "${WILDCARD_CERT}" \
      "*.pikesquares.dev" localhost 127.0.0.1
  SCIE_BOOT="generate-certs" ${APP_BINARY_PATH} -install
fi

# Creating daemon plist
cat > "$USER_DAEMON_PATH" << __EOF__
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>$DAEMON_ID</string>
	<key>UserName</key>
	<string>$SERVER_USER</string>
	<key>EnvironmentVariables</key>
	<dict>
		<key>PATH</key>
		<string>$SYSTEM_PYTHON_BIN_DIR:$PATH</string>
	</dict>
	<key>Program</key>
	<string>$APP_BINARY_PATH</string>
	<key>ProgramArguments</key>
	<array>
		<string>up</string>
		<string>--foreground</string>
	</array>
	<key>WorkingDirectory</key>
	<string>$USER_APP_DIR</string>
	<key>StandardOutPath</key>
	<string>$LOG_DIR/$APP_NAME-daemon-out.log</string>
	<key>StandardErrorPath</key>
	<string>$LOG_DIR/$APP_NAME-daemon-error.log</string>
	<key>RunAtLoad</key>
	<true/>
	<key>KeepAlive</key>
	<true/>
</dict>
</plist>
__EOF__

# Run daemon
echo "Launch daemon $DAEMON_ID"
sudo /bin/launchctl load -w $USER_DAEMON_PATH

# Chown app dir to user to prevent permission denied error
chown -R $USER: "$USER_APP_DIR"

sudo chmod +x /usr/local/bin/pikesquares-uninstall

exit 0
