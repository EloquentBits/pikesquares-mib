#!/usr/bin/env bash
set -euxo pipefail

# if [ "$(whoami)" != "root" ]; then
#     echo "You must be root to do this"
#     su -c "$0 $*"
#     exit
# fi
generate_ca_certs() {
  echo "generating CA certs"

  #CA_EXPIRE_DAYS
  #CA_C=
  #CA_L=
  #CA_OU=
  #CA_CN=

  CA_SUBJ="/C=${CA_C:-"US"}/L=${CA_L:-"New York"}/O=${CA_O:-"Eloquent Bits Inc."}/OU=${CA_OU:-"Pike Squares App"}/CN=${CA_CN:-"Pike Squares App"}"

  umask 377
  openssl rand -base64 32 > "${CAROOT}/ca.pass"

  # ca.key / ca.crt
  openssl req \
      -new -x509 -days "${CA_EXPIRE_DAYS:-365}" \
      -newkey rsa:4096 -keyout "${CAROOT}/ca.key" -passout file:"${CAROOT}/ca.pass" \
      -out "${CAROOT}/ca.crt" -subj "$CA_SUBJ"

  umask 022

  chmod 400 "${CAROOT}/ca.key"
  chmod 444 "${CAROOT}/ca.crt"
  GROUP=$(id -g $SERVER_USER)
  chown "$SERVER_USER":"${GROUP}" "${CAROOT}/ca.crt"

  echo
  echo "The Certificate Authority files have been generated :"
  echo " - key :         '${CAROOT}/ca.key'"
  echo " - certificate : '${CAROOT}/ca.crt' (self-signed) "

}

generate_server_certs() {
  echo "generating server certs"

  NO_PASSWD=${NO_PASSWD:-true}
  CRT_CN="PikeSquaresHTTPSRouter"

  # default value should be override
  CRT_SUBJ="/C=${CRT_C:-"US"}/L=${CRT_L:-"New York"}/O=${CRT_O:-"Eloquent Bits Inc."}/OU=${CRT_OU:-"Pike Squares App"}/CN=${CRT_CN:="default"}"
  CRT_CN="$(echo $CRT_SUBJ | sed -e 's,.*CN=\([^/]*\).*,\1,')"

  echo "CRT_SUBJ: ${CRT_SUBJ}"
  echo "CRT_CN: ${CRT_CN}"

  CRT_SAN="DNS:*.pikesquares.dev,IP:127.0.0.1,DNS:localhost"
  EXTFILE_CONTENT="\\nsubjectAltName = ${CRT_SAN}"

  CRT_UID="serverCertificate_$( date +%Y%m%d_%H%M%S )_$( echo ${CRT_CN} | tr -dc A-Za-z0-9 )"
  PASSWD_STRING="$( $NO_PASSWD && echo "-nodes" || echo "-passout file:${CAROOT}/${CRT_UID}.key.pass" )"
  echo ${PASSWD_STRING}

  umask 377
  openssl rand -base64 32 > "${CAROOT}/${CRT_UID}.key.pass"

  cat "${CAROOT}/${CRT_UID}.key.pass"

  # .key / .csr
  openssl req \
      -new \
      -newkey rsa:4096 \
      -keyout "${CAROOT}/${CRT_UID}.key" "${PASSWD_STRING}" \
      -out "${CAROOT}/${CRT_UID}.csr" \
      -subj "${CRT_SUBJ}"

  # .crt
  openssl x509 -req -days ${CRT_EXPIRE_DAYS:-"365"} -sha256 \
    -in "${CAROOT}/${CRT_UID}.csr" \
    -passin "file:${CAROOT}/ca.pass" \
    -CA "${CAROOT}/ca.crt" \
    -CAkey "${CAROOT}/ca.key" \
    -CAserial "${CAROOT}/ca.srl" \
    -CAcreateserial \
    -out "${CAROOT}/${CRT_UID}.crt" -extfile <(echo -e "$EXTFILE_CONTENT")

  chmod 600 "${CAROOT}/ca.srl"
  chmod 444 "${CAROOT}/${CRT_UID}.csr" "${CAROOT}/${CRT_UID}.crt"

}

APP_NAME="pikesquares"
APP_BINARY_PATH="/usr/local/bin/$APP_NAME"
SERVER_USER="$USER"
USER_HOME="$HOME"
# if [ "$USER" = "root" ]; then
# 	echo "Seems like running from root, creating dedicated user"
# 	SERVER_USER="pikesquares"
# 	local max_id=$(dscl . -list /Users UniqueID | awk 'BEGIN { max = 500; } { if ($2 > max) max = $2; } END { print max + 1; }')
#     local new_id=$((max_id+1))

#     # Creating group for user (groupadd)
#     dscl . -create "/Groups/$SERVER_USER"
#     dscl . -create "/Groups/$SERVER_USER" gid "$new_id"

#     # Creating user itself (useradd)
#     dscl . -create "/Users/$SERVER_USER"
#     dscl . -create "/Users/$SERVER_USER" UserShell /bin/bash
#     dscl . -create "/Users/$SERVER_USER" UniqueID "$new_id"
#     dscl . -create "/Users/$SERVER_USER" PrimaryGroupID "20"
#     # Promote user to admin if need
#     # dscl . -append /Groups/admin GroupMembership "$SERVER_USER"
# 	USER_HOME="/Users/$SERVER_USER"
# fi

LOG_DIR="$USER_HOME/Library/Logs/$APP_NAME"
[[ -d "$LOG_DIR" ]] || mkdir -p "$LOG_DIR"

LOG_FILE_PATH="$LOG_DIR/$APP_NAME-script-postinstall.log"

exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>"$LOG_FILE_PATH" 2>&1
# Everything below will go to the file 'pikesquares-postinstall-log.out':
echo "[installing as $(whoami) for $USER] Logging postinstall script to $LOG_FILE_PATH @ $(date +%c)"

DAEMON_ID="com.eloquentbits.${APP_NAME}"
SYSTEM_APP_DIR="/Library/Application Support/${APP_NAME}"
SYSTEM_DAEMON_PATH="/Library/LaunchDaemons/${DAEMON_ID}.plist"
USER_APP_DIR="${USER_HOME}${SYSTEM_APP_DIR}"
USER_DAEMON_PATH="${USER_HOME}/Library/LaunchAgents/${DAEMON_ID}.plist"
DOMAIN="system"
if [ "$USER" = "root" ]; then
	USER_APP_DIR="$SYSTEM_APP_DIR"
	USER_DAEMON_PATH="$SYSTEM_DAEMON_PATH"
fi

mkdir -p $(dirname "$USER_DAEMON_PATH")

SYSTEM_PYTHON_PATH=$(which python3)
SYSTEM_PYTHON_BIN_DIR=$(dirname $SYSTEM_PYTHON_PATH)

# Generating SSL certificates
CAROOT="${USER_APP_DIR}/ssl"  # The dir should be the same as in conf.py!!!
[[ -d "$CAROOT" ]] || mkdir -p "$CAROOT"

WILDCARD_CERT="${CAROOT}/pikesquares.dev.pem"
WILDCARD_CERT_KEY="${CAROOT}/pikesquares.dev-key.pem"
if [[ ! -f "${WILDCARD_CERT_KEY}" || ! -f "${WILDCARD_CERT}" ]]; then 
  echo "Generating CA and self-signed wildcard cert."
  generate_ca_certs
  generate_server_certs
#   SCIE_BOOT="generate-certs" ${APP_BINARY_PATH} -key-file "${WILDCARD_CERT_KEY}" -cert-file "${WILDCARD_CERT}" \
#       "*.pikesquares.dev" localhost 127.0.0.1
#   SCIE_BOOT="generate-certs" ${APP_BINARY_PATH} -install
fi

# To patch PATH we need to call one of commands
$APP_BINARY_PATH status

# Creating daemon plist
cat > "$USER_DAEMON_PATH" << __EOF__
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>$DAEMON_ID</string>
	<key>UserName</key>
	<string>$SERVER_USER</string>
	<key>EnvironmentVariables</key>
	<dict>
		<key>PATH</key>
		<string>$SYSTEM_PYTHON_BIN_DIR:$PATH</string>
	</dict>
	<key>Program</key>
	<string>$APP_BINARY_PATH</string>
	<key>ProgramArguments</key>
	<array>
		<string>up</string>
		<string>--foreground</string>
	</array>
	<key>WorkingDirectory</key>
	<string>$USER_APP_DIR</string>
	<key>StandardOutPath</key>
	<string>$LOG_DIR/$APP_NAME-daemon-out.log</string>
	<key>StandardErrorPath</key>
	<string>$LOG_DIR/$APP_NAME-daemon-error.log</string>
	<key>RunAtLoad</key>
	<true/>
	<key>KeepAlive</key>
	<true/>
</dict>
</plist>
__EOF__

# Run daemon
echo "Launch daemon $DAEMON_ID"
sudo /bin/launchctl load -w $USER_DAEMON_PATH

# Chown app dir to user to prevent permission denied error
chown -R $USER: "$USER_APP_DIR"

sudo chmod +x /usr/local/bin/pikesquares /usr/local/bin/pikesquares-uninstall

exit 0
